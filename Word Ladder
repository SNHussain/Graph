class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<pair<string, int>> q;
        q.push({beginWord, 1});

        unordered_set<string> st(wordList.begin(), wordList.end());
        st.erase(beginWord);

        while(!q.empty()){
            string word= q.front().first;
            int steps=q.front().second;

            q.pop();
            if(word == endWord) return steps;


            //hat
            for(int i=0; i<word.size(); i++){
                char original= word[i]; //h at index[0]
                for(char ch='a' ; ch <='z'; ch++){
                    word[i]=ch; //a at [0] = aat
                    if(st.find(word) != st.end()){
                        st.erase(word);

                        q.push({word, steps + 1});
                    }
                }
                word[i]=original; // restores h at 0 so its hat again before moving to [1]
            }
        }

        return 0;
    }
};
