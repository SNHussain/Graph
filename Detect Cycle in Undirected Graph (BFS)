class Solution {
  public:
    bool  isCycleBFS(vector<int> adj[], int u, vector<bool> &visited){
        queue<pair<int , int>> que;
        que.push({u, -1});
        visited[u]=true;
        
        while(!que.empty()){
            pair<int, int> P=que.front();
            que.pop();
            
            int source=P.first;
            int parent=P.second;
            for(int &v: adj[source]){
                if(visited[v] == false){
                    visited[v] = true;
                    que.push({v,source});
                }
                else if(v != parent){
                    return true;
                }
            }
        }
        
        return false;
    }
    
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        vector<int> adj[V];
        
        for(auto &e: edges){
            int u=e[0];
            int v=e[1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<bool> visited(V, false);
        
        for(int i=0; i<V; i++){
            if(!visited[i] ){
                if( isCycleBFS(adj, i , visited )){
                    return true;
                }
            }
        }
        
        return false;
    }
};
