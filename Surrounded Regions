class Solution {
public:
    int n, m;
    vector<vector<int>> directions{{0,1},{0,-1},{1,0},{-1,0}};
    void dfs(int i, int j, vector<vector<bool>>& vis, vector<vector<char>> &board){
        vis[i][j]= true;


        
        for(auto &dir: directions){
            int nrow= i +dir[0];
            int ncol= j +dir[1];

            if(nrow < n && nrow >= 0 && ncol < m && ncol >= 0 
            && !vis[nrow][ncol] && board[nrow][ncol] == 'O'){
                dfs(nrow, ncol, vis, board);
            }
        }

    }
    void solve(vector<vector<char>>& board) {
        n = board.size();
        m = board[0].size();
        
        vector<vector<bool>> vis(n, vector<bool>(m,false));
        
        //first and last row
        for(int col=0; col<m; col++){
            if(!vis[0][col] && board[0][col] == 'O'){
                dfs(0, col, vis, board);
            }

            if(!vis[n-1][col] && board[n-1][col] == 'O'){
                dfs(n-1, col, vis, board);
            }
        }
        //first and last col
        for(int row=0; row<n; row++){
            if(!vis[row][0] && board[row][0] == 'O'){
                dfs(row, 0, vis, board);
            }

            if(!vis[row][m-1] && board[row][m-1] == 'O'){
                dfs(row, m-1, vis, board);
            }
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(!vis[i][j] && board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
            }
        }

    }
};
